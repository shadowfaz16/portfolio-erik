export declare const operations: (import("@moralisweb3/common-core").Operation<import("./solana").RequestChallengeSolanaRequest, {
    domain: string;
    network: "mainnet" | "devnet";
    address: string;
    statement: string | undefined;
    uri: string;
    expirationTime: import("@moralisweb3/common-core").DateInput | undefined;
    notBefore: import("@moralisweb3/common-core").DateInput | undefined;
    resources: string[] | undefined;
    timeout: number;
}, {
    id: string;
    message: string;
    profileId: string;
}, {
    id: string;
    message: string;
    profileId: string;
}> | import("@moralisweb3/common-core").Operation<import("./evm").RequestChallengeEvmRequest, {
    domain: string;
    chainId: string;
    address: string;
    statement: string | undefined;
    uri: string;
    expirationTime: import("@moralisweb3/common-core").DateInput | undefined;
    notBefore: import("@moralisweb3/common-core").DateInput | undefined;
    resources: string[] | undefined;
    timeout: number;
}, {
    id: string;
    message: string;
    profileId: string;
}, {
    id: string;
    message: string;
    profileId: string;
}> | import("@moralisweb3/common-core").Operation<import("./evm").GetAddressesRequest, import("./evm").GetAddressesRequest, string[], string[]> | import("@moralisweb3/common-core").Operation<import("./evm").RemoveBindRequest, {
    blockchainType: import("@moralisweb3/common-core").Camelize<"evm" | "solana">;
    address: string;
    profileId: string;
}, {
    message: string;
}, {
    message: string;
}> | import("@moralisweb3/common-core").Operation<import("./evm").RequestBindRequest, {
    addresses: {
        blockchainType: "evm" | "solana";
        address: string;
    }[];
}, {
    messages: string[];
}, {
    messages: string[];
}> | import("@moralisweb3/common-core").Operation<import("./evm").VerifyRemoveBindRequest, {
    message: string;
    signature: string;
}, {
    profileId: string;
}, {
    profileId: string;
}> | import("@moralisweb3/common-core").Operation<import("./evm").VerifyRequestBindRequest, {
    verifications: import("@moralisweb3/common-core").Camelize<{
        message: string;
        signature: string;
    }>[];
}, {
    profileId: string;
}, {
    profileId: string;
}>)[];
//# sourceMappingURL=operations.d.ts.map